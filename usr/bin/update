#!/bin/bash

# Updater script for this cartridge
MANIFEST_URL="http://cartreflect-claytondev.rhcloud.com/github/budisteikul/openshift-cartridge-nginx-php7"
MANIFEST_PARSER="${OPENSHIFT_PHP_DIR}usr/bin/manifest.py"
# MANIFEST_LOCAL="${OPENSHIFT_PHP_DIR}metadata/manifest.yml"

function check() {
    echo "Checking for updates..."
    
    # Get remote cartridge version
    wget -q -O /tmp/manifest_latest.yml $MANIFEST_URL
    
    eval $(python $MANIFEST_PARSER /tmp/manifest_latest.yml 'REMOTE_')
    eval $(python $MANIFEST_PARSER ${OPENSHIFT_PHP_DIR}/usr/bin/manifest.yml 'LOCAL_')

	if [ "$LOCAL_CARTRIDGE_VERSION" != "$REMOTE_CARTRIDGE_VERSION" ]; then
    	echo "Cartridge ${REMOTE_CARTRIDGE_VERSION} is available"
        echo "available" > /tmp/update_version
    else
    	echo "Your Cartridge is up to date."
    fi
    
    if [ "$LOCAL_NGINX_VERSION" != "$REMOTE_NGINX_VERSION" ]; then
    	echo "Nginx ${REMOTE_NGINX_VERSION} is available"
        echo "available" > /tmp/update_version
    else
    	echo "Your Nginx is up to date."
    fi
    
    if [ "$LOCAL_PHP_VERSION" != "$REMOTE_PHP_VERSION" ]; then
    	echo "PHP ${REMOTE_PHP_VERSION} is available"
        echo "available" > /tmp/update_version
    else
    	echo "Your PHP is up to date"
    fi
}

function update_dev() {
		wget -q -O /tmp/manifest_latest.yml $MANIFEST_URL
        
		URL="https://bitbucket.org/budisteikul/openshift-cartridge-nginx-php7/get/master.tar.gz"
		echo "Downloading binary.tar.gz..."
        
        wget -O /tmp/binary.tar.gz $URL
        
        # curl $URL -L > "/tmp/binary.tar.gz" --progress-bar

        echo "Extracting binary.tar.gz..."
        
        if [ -d "/tmp/binary" ]; then
            rm -rf "/tmp/binary"
        fi

        mkdir "/tmp/binary"
        tar -xf "/tmp/binary.tar.gz" -C "/tmp/binary" --strip-components=1 --warning=no-timestamp

        echo "Preparing to apply update..."
        
        service php-fpm stop
        service nginx stop

        echo "Applying update..."
        if [ -d "/tmp/binary/usr/" ]; then
        	# rm -rf "${OPENSHIFT_PHP_DIR}usr/"
        	cp -rf "/tmp/binary/usr/" $OPENSHIFT_PHP_DIR

        	echo "Finishing update..."
        	rm -rf "/tmp/binary"
        	rm -f "/tmp/update_version"
        	cp /tmp/manifest_latest.yml ${OPENSHIFT_PHP_DIR}/usr/bin/manifest.yml
        	rm -f "/tmp/manifest_latest.yml"
            
            service nginx start
        	service php-fpm start
            echo "Update binary complete!"
        else
        	service nginx start
        	service php-fpm start
        	echo "Update failed, file binary corrupted!"
        fi
}


function update_process() {
		
        wget -q -O /tmp/manifest_latest.yml $MANIFEST_URL
        
        # URL="https://bitbucket.org/budisteikul/openshift-cartridge-nginx-php7/get/master.tar.gz"
		URL="https://github.com/budisteikul/openshift-cartridge-nginx-php7/archive/master.tar.gz"
		echo "Downloading binary.tar.gz..."
        
        wget -O /tmp/binary.tar.gz $URL
        
        # curl $URL -L > "/tmp/binary.tar.gz" --progress-bar

        echo "Extracting binary.tar.gz..."
        
        if [ -d "/tmp/binary" ]; then
            rm -rf "/tmp/binary"
        fi

        mkdir "/tmp/binary"
        tar -xf "/tmp/binary.tar.gz" -C "/tmp/binary" --strip-components=1 --warning=no-timestamp

        echo "Preparing to apply update..."
        
        service php-fpm stop
        service nginx stop

        echo "Applying update..."
        if [ -d "/tmp/binary/usr/" ]; then
        	# rm -rf "${OPENSHIFT_PHP_DIR}usr/"
        	cp -rf "/tmp/binary/usr/" $OPENSHIFT_PHP_DIR

        	echo "Finishing update..."
        	rm -rf "/tmp/binary"
        	rm -f "/tmp/update_version"
        	cp /tmp/manifest_latest.yml ${OPENSHIFT_PHP_DIR}/usr/bin/manifest.yml
        	rm -f "/tmp/manifest_latest.yml"
            
            service nginx start
        	service php-fpm start
            echo "Update binary complete!"
        else
        	service nginx start
        	service php-fpm start
        	echo "Update failed, file binary corrupted!"
        fi
       
}

function force() {
		update_process
}

function install() {
    
    if [ ! -f /tmp/update_version ]; then
        echo "No updates available."
        echo "Please run \`update check\` to check for updates"

        return 0
    fi

    echo "You are updating binary to a new version."
    echo "Make sure you have a backup just in case something gets wrong."

    read -p "Proceed? [Y/n]: "

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        update_process
    fi
}

case "$1" in
    check)      check;;
    install)    install;;
    dev)    	dev;;
    force)   	force;;
    *)          check
esac
