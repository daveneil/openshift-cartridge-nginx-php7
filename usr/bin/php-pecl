#!/bin/bash
set -e

CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
PHP_BIN_DIR=${OPENSHIFT_PHP_DIR}/usr/bin
BUILD_DIR="${OPENSHIFT_TMP_DIR}/pecl-build"

function download_and_unpack() {
    if [ -z "${2}" ] || [ -z "${3}" ]; then
        echo "download_and_unpack: expected two arguments"
        return 1
    fi

    local pkg=${2}
    local pkg_url=${3}

    # Determin the extraction directory
    local extract_dir=''
    if [ ! -z "${4}" ]; then
        extract_dir="${4}"
    else
        local pkg_len=${#pkg}
        if [[ "${pkg}" == *'.tar.gz' ]]; then
            extract_len=$((pkg_len - 7))
        elif [[ "${pkg}" == *'.tgz' ]]; then
            extract_len=$((pkg_len - 4))
        elif [[ "${pkg}" == *'.tar.bz2' ]]; then
            extract_len=$((pkg_len - 8))
        else
            echo "ERROR: ${pkg} unknown extension."
            exit -1
        fi
        extract_dir="${pkg:0:extract_len}"
    fi

    # Determin extract arguments
    local extract_args=xfz
    if [[ "${pkg}" == *'.tar.bz2' ]]; then
        extract_args=xfj
    fi

    # Download the package
    echo "Downloading ${pkg}:"
    if [ ! -f "${pkg}" ] || [ ! -d "${extract_dir}" ]; then
        wget --progress=dot --output-document=./${pkg} ${pkg_url}
        echo "- done"
    else
        echo "- skipping file exists."
    fi

    # Check file (incase openshift hangsup)
    echo "Unpacking ${pkg}:"
    local check_file=`md5sum ${pkg} | awk '{ print $1 }'`
    if [ -f ${check_file} ]; then
        echo "- cleaning failure."
        # We know extraction failed previously
        # So remove that folder
        rm -rf "${extract_dir}"
    elif [ -d "${extract_dir}" ]; then
        # The directory exists so don't extract again
        echo "- skipping directory exists."
        return 0
    fi

    # Extract
    touch ${check_file}
    tar ${extract_args} "${pkg}"

    # Done so remove the check file
    rm ${check_file}
    echo "- done."

    return 0
}

function check() {
    if [ -z "${2}" ] || [ -z "${3}" ]; then
        echo "check_pecl: expected two arguments <ext> <version>"
        return 1
    fi

    local pecl_version=`${PHP_BIN_DIR}/php -r "echo phpversion('${2}');"`

    if [[ ${3} != ${pecl_version} ]]; then
        echo "PHP pecl ${2} not installed or old version ${pecl_version}."
        install_pecl ${2} ${3} ${4}
    else
        echo "PHP pecl ${2} up to date, version: ${3}."
    fi
}

function install() {
	service php-fpm stop
    if [ -z "${2}" ] || [ -z "${3}" ]; then
        echo "check_pecl: expected two arguments <ext> <version>"
        return 1
    fi

    mkdir -p ${BUILD_DIR}
    pushd ${BUILD_DIR}

    local name=${2}-${3}
    download_and_unpack ${name}.tgz http://pecl.php.net/get/${name}.tgz
    pushd ${name}
    
    echo "Configuring ${2}."
    ${PHP_BIN_DIR}/phpize
    ./configure \
    	--with-php-config=${PHP_BIN_DIR}/php-config \
    	${4}
    
    echo "Compiling ${2}."
    make install

    popd
    

    echo "Cleaning build directory."
    popd
    rm -rf ${BUILD_DIR}

	pushd ${OPENSHIFT_PHP_DIR}/conf/ext
    rm -rf ${2}.ini
    popd
    
    # Add extension to the php.ini
    echo "extension=${2}.so" >> ${OPENSHIFT_PHP_DIR}/conf/ext/${2}.ini
   
    
    PHP_FPM_EXT=${OPENSHIFT_PHP_DIR}/conf/ext/extension.ini
    EXT_FILE=${OPENSHIFT_REPO_DIR}/.openshift/extension.ini.erb
    if [ -f "${EXT_FILE}" ]; then
        oo-erb ${EXT_FILE} > ${PHP_FPM_EXT}
    else
        oo-erb ${OPENSHIFT_PHP_EXTENSION_DIR}/extension.ini.erb > ${PHP_FPM_EXT}
    fi
    
    service php-fpm start
}

function uninstall() {
	service php-fpm stop
    
    rm -rf ${OPENSHIFT_PHP_DIR}/conf/ext/*.ini
    
	PHP_FPM_EXT=${OPENSHIFT_PHP_DIR}/conf/ext/extension.ini
    EXT_FILE=${OPENSHIFT_REPO_DIR}/.openshift/extension.ini.erb
    if [ -f "${EXT_FILE}" ]; then
        oo-erb ${EXT_FILE} > ${PHP_FPM_EXT}
    else
        oo-erb ${OPENSHIFT_PHP_EXTENSION_DIR}/extension.ini.erb > ${PHP_FPM_EXT}
    fi
    
    service php-fpm start
}

case "$1" in
    install)    install;;
    uninstall)    uninstall;;
    *)         exit 0
esac